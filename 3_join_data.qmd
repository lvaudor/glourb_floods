```{r setup, warnings=FALSE, message=FALSE}
library(tidyverse)
wd_events=readRDS("data/wd_events.RDS")
wp_20_words_per_event=readRDS("data/wp_20_words_per_event.RDS")
wp_words_spec=readRDS("data/wp_words_spec.RDS")
wm_full2=readRDS("data/wm_full.RDS") %>% 
  left_join(wp_20_words_per_event %>% select(flood,words),
            by="flood") %>% 
  left_join(wp_words_spec %>%
              select(flood,specific_words),by="flood") %>% 
  # left_join(flood_class,
  #           by="flood") %>% 
  select(-starts_with("what"),
         -starts_with("start"),
         -starts_with("end"))
saveRDS(wm_full2,"data/wm_full2.RDS")
```




```{r}
 wp_pages_complete=readRDS("data/wp_pages.RDS") %>% 
        left_join(readRDS("data/transitory/wp_pages_views.RDS"),
                  by=c("article")) %>% 
        left_join(readRDS("data/transitory/wp_pages_curation.RDS") %>% select(-length),
                  by=c("article")) %>%              left_join(readRDS("data/transitory/wp_pages_complex_topics.RDS"),
                  by=c("article")) %>%
         left_join(readRDS("data/wd_events.RDS") %>%
                     select(flood,date,country_label,year, deathtoll),
                   by="flood") %>%
         left_join(readRDS("data/transitory/countries.RDS") %>% 
                     select(country_label,HDI,HDI_class,population,area,density)) %>% 
        filter(!is.na(HDI_class))  %>% 
        unique()
saveRDS(wp_pages_complete,"data/wp_pages_complete.RDS")
```

# Wikidata Map

wm_map corresponds to a dataset with one row=one event (we summarise coordinates into a single centroid) and a popup variable.

```{r wm_map, warning=FALSE, message=FALSE}
library(leaflet)
wm_map=readRDS("data/wm_full2.RDS") %>%
   filter(!is.na(coords)) %>%
   group_by(flood,flood_label) %>%
   sf::st_as_sf(wkt="coords") %>%
   summarise(deathtoll=mean(deathtoll),
             specific_words=unique(specific_words),
             #color=unique(color),
             coords_from=first(coords_from),
             date=first(date),
             year=first(year),
             popup=NA) %>%
   sf::st_centroid()
```

We will jitter the coordinates in order to not have exactly overlapping coordinates on the map.

```{r jitter_coords}
tcoords=wm_map %>%
  sf::st_coordinates() %>%
  as_tibble() %>%
  select(long=X,lat=Y)
wm_map=wm_map %>%
  bind_cols(tcoords)

jitter_coord=function(datlonlat,n){
  long=datlonlat$long+runif(n,-0.2,0.2)
  lat=datlonlat$lat+runif(n,-0.2,0.2)
  result=tibble::tibble(flood=datlonlat$flood,
                           long=long,
                           lat=lat)
  return(result)
}

jittered_coords=wm_map  %>%
  sf::st_drop_geometry() %>%
  select(flood,
         #coords_txt,
         long,lat) %>%
  unique() %>%
  group_by(long,lat) %>%
  mutate(n=n()) %>%
  unnest() %>%
  tidyr::nest(data=c(flood,long,lat)) %>%
  mutate(data=purrr::map2(data,n,jitter_coord)) %>%
  tidyr::unnest(cols=c(data)) %>%
  ungroup()
```

Re-generate data geometry from jittered coords

```{r new_geometry}
wm_map=wm_map %>%
  sf::st_drop_geometry() %>%
  select(-long,-lat) %>%
  left_join(jittered_coords %>%
              select(flood,long,lat),
            by="flood") %>%
  sf::st_as_sf(coords = c("long", "lat"),
               crs = 4326, agr = "constant") %>%
  mutate(deathtoll=case_when(is.na(deathtoll)~0,
                             TRUE~deathtoll))
saveRDS(wm_map,"data/wm_map.RDS")
```

```{r produce_map}
# Définition d'une échelle colorée
# (en fonction de date de sortie)
library(leaflet)
pal <- colorNumeric(c("red", "green", "blue"),
                    c(1648,1900,1950,1980,2000,2010,2023))
# Création de la carte
leaf_wm_map=leaflet(wm_map) %>% # déf carte
  addProviderTiles(providers$Esri.WorldTopoMap) %>% # ajout fond de carte
  addCircleMarkers(col=~pal(year),
                   radius =~log(deathtoll+1)
                   )
```

# Data from institutionnally curated databases

## Data from the Dartmouth Flood Observatory

```{r def_avdate}
avdate=function(date1,date2){
  date1=as.numeric(date1)
  date2=as.numeric(date2)
  result=as.Date(mean(c(date1,date2)))
  return(result)
}
```

Read Flood Archive data and rename columns.

```{r read_tib_dfo, warning=FALSE, message=FALSE}
dfo_raw=readxl::read_xlsx("data/transitory/FloodArchive.xlsx")
colnames(dfo_raw)=c("index",
                    "GlideNumber",
                    "dfo_country",
                    "dfo_other_country",
                    "dfo_centroid_x",
                    "dfo_centroid_y",
                    "area",
                    "dfo_began",
                    "dfo_ended",
                    "validation",
                    "dfo_dead",
                    "displaced",
                    "maincause",
                    "severity")
dfo_raw=dfo_raw %>%
  mutate(start=lubridate::ymd(dfo_began),
         end=lubridate::ymd(dfo_ended)) %>%
  mutate(flood=as.character(index),
         flood_label=as.character(index),
         country_label=dfo_country,
         deathtoll=dfo_dead,
         coords=paste0("Point(",dfo_centroid_x," ",dfo_centroid_y,")"))
```

Calculate average dates, format coordinates, set coordinates reference system.

```{r}
dfo_comp=dfo_raw %>%
  select(flood,flood_label,country_label,start,end,deathtoll,coords) %>%
  mutate(date=purrr::map2(start,end,avdate)) %>%
  tidyr::unnest(date)%>%
  sf::st_as_sf(wkt="coords") %>%
  sf::st_set_crs(4326)
```

Correct the names of countries to match those in the Wikidata dataset. This is necessary because the DFO dataset uses different names for some countries, which can lead to mismatches when trying to join datasets.


```{r}
#wm_full=readRDS("data/wm_full.RDS")
corrections=tibble::tribble( ~raw,~clean,
                             "El Savador","El Salvador",
                             "Bangaldesh","Bangladesh",
                             "Bangledesh","Bangladesh",
                             "Boliva","Bolivia",
                             "Bosnia and Herzogovina","Bosnia and Herzegovina",
                             "Bosnia-Herzegovenia","Bosnia and Herzegovina",
                             "Bosnia-Herzegovina","Bosnia and Herzegovina",
                             "Britain","United Kingdom of Great Britain and Ireland",
                             "Britain, Ireland","United Kingdom of Great Britain and Ireland",
                             "England","United Kingdom of Great Britain and Ireland",
                             "UK","United Kingdom of Great Britain and Ireland",
                             "Unitd Kingdom","United Kingdom of Great Britain and Ireland",
                             "Scotland","United Kingdom of Great Britain and Ireland",
                             "Burkino Faso","Burkina Faso",
                             "Burma","Myanmar",
                             "Burma/Myanmar","Myanmar",
                             "Camaroun","Cameroon",
                             "Congo","Republic of the Congo",
                             "Congo Republic","Republic of the Congo",
                             "DR Congo","Democratic Republic of the Congo",
                             "Democratic  Republic of the Congo","Democratic Republic of the Congo",
                             "Democratic  Republic Congo","Democratic Republic of the Congo",
                             "Democratic Republic of Congo","Democratic Republic of the Congo",
                             "Cote D'Iavoir","Ivory Coast",
                             "Cote d'Ivoire","Ivory Coast",
                             "China","People's Republic of China",
                             "Guatamala","Guatemala",
                             "USA","United States of America",
                             "USA.","United States of America",
                             "Viet Nam","Vietnam",
                             "Zimbawe","Zimbabwe",
                             "Venezulea","Venezuela",
                             "Uruguay,","Uruguay",
                             "Serbia and Montenegro","Serbia",
                             "Serbia-Montenegro","Serbia",
                             "Madascar","Madagascar",
                             "Philipines","Philippines",
                             "Philippine","Philippines",
                             "Phillipines","Philippines",
                             "Phillippines","Philippines",
                             "South Sudan","Sudan",
                             "Sudan and Eritrea","Sudan"
                             )

                             
                             
correct=function(vstring){
  result=tibble::tibble(vstring=vstring) %>% 
    left_join(corrections, by=c("vstring"="raw")) %>% 
    mutate(vstring=case_when(!is.na(clean)~clean,
                             TRUE~vstring))
  return(result$vstring)
}

dfo_comp=dfo_comp %>% 
  mutate(country_label=str_replace(country_label,"\\s*$","")) %>% 
  mutate(country_label=str_replace(country_label,"^\\s*","")) %>% 
  mutate(country_label=correct(country_label)) %>% 
  mutate(flood=case_when((flood=="4842" & country_label=="Mozambique")~"4842b",
                         TRUE~flood)) %>% 
  mutate(flood_label=case_when(flood=="4842b"~"4842b",
                               TRUE~flood_label)) %>% 
  mutate(chargeom=as.character(coords)) %>% 
  filter(!(flood=="278" & chargeom=="c(-3.96448, 50.9569)")) %>% 
  select(-chargeom) %>%
   mutate(source="dfo",
          geometry=coords) %>%
   select(-coords) %>%
   mutate(popup=glue::glue("<h1>{flood_label}</h1>
                            <p>date: {date}</p>
                            <p>deathtoll:{deathtoll}</p>"))

saveRDS(dfo_comp,"data/dfo_comp.RDS")
# tt=full_join(wm_full %>% select(flood,country_label) %>% unique() %>% group_by(country_label) %>% summarise(nwd=n()),
#              dfo_rc %>% group_by(country_label) %>% summarise(ndfo=n()),
#              by="country_label")
# tt
```


```{r}
# dfo_compc=sf::st_as_sf(dfo_rc,wkt="coords") %>% 
#   group_by(flood,flood_label) %>% 
#   summarise(flood_label=unique(flood_label),
#             country_label=unique(country_label),
#             deathtoll=mean(deathtoll),
#             start=min(start),
#             end=max(end),
#             date=mean(date)) %>% 
#   sf::st_centroid() %>% 
#   ungroup() 
```

This dataset documents `r nrow(dfo_comp)` flood events that occurred between `r min(dfo_comp$start)` and `r max(dfo_comp$end)`.

```{r wm_comp}
wm_comp=wm_map %>%
  select(flood,flood_label,deathtoll, date,popup) %>%
  filter(date>lubridate::ymd("1985-01-01") &
         date<lubridate::ymd("2021-12-31")) %>%
  mutate(source="wd")
```

```{r dfo_comp}
#ICI!!
wm_dfo=bind_rows(wm_comp,dfo_comp)
saveRDS(wm_dfo,"data/wm_dfo.RDS")
```

## Basic stats

Based on the spatial and temporal data in both datasets, we try to find correspondences between the events described in Wikidata and those described in the Dartmouth Flood Observatory.

```{r def_find_corresponding_flood}
find_corresponding_flood=function(flood_id,tib=wm_dfo){
  tib_sub=tib %>% filter(flood==flood_id)
  tib=tib %>% filter(source=="dfo")
  tib_dist=tib %>%
    mutate(disttime=abs(tib$date-tib_sub$date),
           distspace=sf::st_distance(tib,tib_sub)[,1]) %>%
    mutate(disttime=as.numeric(disttime),
           distspace=as.numeric(distspace)) %>%
    filter(flood!=flood_id) %>%
    mutate(cond1=disttime<400 & distspace<400000,
           cond2=disttime<400 & str_detect(country_label,tib_sub$country_label)) %>%
    filter(cond1|cond2) %>%
    select(floodcorr=flood,
           disttime,
           distspace,
           sourcecorr=source,
           country_corr=country_label,
           deathtoll_corr=deathtoll) %>%
    sf::st_drop_geometry()
  if(nrow(tib_dist)==0){
    tib_dist=tibble::tibble(floodcorr=NA,
                            disttime=NA,
                            distspace=NA,
                            sourcecorr=NA,
                            countrycorr=NA,
                            deathtollcorr=NA)
  }else{
    tib_dist=tib_dist %>%
    filter(disttime==min(disttime,na.rm=TRUE))
  }

  return(tib_dist)
}
```

For each flood event defined in the WD dataset, we filter the DFO dataset to only keep the event corresponding to the minimum distance in space and time, then we consider the events concur if they occurred less than 400 days apart and 400 kms away. This is a rather loose correspondence which is explained by the sometimes low precision in the WD information corresponding to time or coordinates of occurrence (not to mention the inherent difficulty, for contributors of both datasets, of associating a flood event to a precise time and place).

```{r wm_dfo}
if(!file.exists("data/wm_dfo_corr.RDS")){
  wm_dfo=readRDS("data/wm_dfo.RDS")
  wm_dfo_proj= wm_dfo %>%
    sf::st_set_crs(4326) %>%
    sf::st_transform(3857)
  wm_dfo_corr= wm_dfo_proj %>%
    filter(source=="wd") %>% 
    mutate(data=purrr::map(flood,
                           find_corresponding_flood,
                           tib=wm_dfo_proj)) %>%
    tidyr::unnest(data) %>%
    sf::st_transform(4326)
  saveRDS(wm_dfo_corr,
        "data/wm_dfo_corr.RDS")
}
wm_dfo_corr=readRDS("data/wm_dfo_corr.RDS")
```

We create lines to join events from one dataset to the other.

```{r create_joined_events_lines}
wm_dfo_corr=readRDS("data/wm_dfo_corr.RDS") %>%
  sf::st_drop_geometry()
joined_events=bind_rows(
  tibble::tibble(id=1:nrow(wm_dfo_corr),flood=wm_dfo_corr$flood),
  tibble::tibble(id=1:nrow(wm_dfo_corr),flood=wm_dfo_corr$floodcorr)) %>%
  arrange(id)
joined_events=wm_dfo %>%
  left_join(joined_events, by="flood") %>%
  select(id)%>%
  filter(!is.na(id)) %>%
  arrange(id)%>%
  group_by(id) %>%
  summarise(m =mean(id),do_union=FALSE) %>%
  sf::st_cast("LINESTRING")
joined_events=joined_events[1:(nrow(joined_events)-1),]
saveRDS(joined_events,"data/joined_events.RDS")
```

## Number of correspondences

```{r Nwd_in_ange}
Nwd_in_range=wd_events %>%
  filter(year>=1985 & year<=2021) %>%
  sf::st_drop_geometry() %>%
  summarise(n=length(unique(flood))) %>%
  pull(n)
```

Based on the dates of observations for the DFO data base, `r Nwd_in_range` out of the `r unique(wd_events$flood)` flood events in our Wikidata base might fall into it.

```{r nb_corr}
nb_wm=wm_comp %>% group_by(flood) %>% tally() %>% nrow()
nb_wm_in_dfo=wm_dfo_corr %>% group_by(flood) %>% tally() %>% nrow()
nb_dfo=dfo_comp %>% group_by(flood) %>% tally() %>% nrow()
nb_dfo_in_wd=wm_dfo_corr %>% group_by(floodcorr) %>% tally() %>% nrow()
```

Out of `r nb_wm` flood events documented in the WD comparison data subset, `r nb_wm_in_dfo` have at least one correspondence in the DFO comparison data subset (`r round(nb_wm_in_dfo/nb_wm *100,2)`%).

Out of `r nb_dfo` flood events documented in the DFO comparison data subset, `r nb_dfo_in_wd` have at least one correspondence in the WD comparison data subset (`r round(nb_dfo_in_wd/nb_dfo *100,2)`%).


## Characteristic of floods extracted from Wikidata

For each of these tables, we show below the descriptors names, display which among these correspond to a key useable for joining to other tables, the type of data (numeric, character, logical, etc.) and the contents of one row randomly selected.

```{r def_show_table, echo=FALSE}
source("scripts/show_table.R")
set.seed(123)
```

### wd_events

```{r wd_events}
wd_events=readRDS("data/wd_events.RDS")
knitr::kable(show_table(wd_events,provide_key="flood"))
```

### wp_pages

```{r show_wp_pages}
wp_pages=readRDS("data/wp_pages.RDS")
knitr::kable(show_table(wp_pages,provide_key=c("article")))
```

### wp_revisions

```{r}
wp_revisions=readRDS("data/transitory/wp_revisions.RDS")
knitr::kable(show_table(wp_revisions,provide_key="article"))
```

### wp_pages_views

```{r show_wp_views}
wp_views=readRDS("data/transitory/wp_pages_views.RDS")
knitr::kable(show_table(wp_views,provide_key="article"))
```

### wp_segments

```{r show wp_segments}
wp_segments=readRDS("data/wp_segments.RDS")
knitr::kable(show_table(wp_segments,provide_key="article"))
```

### countries

```{r show_countries}
countries=readRDS("data/transitory/countries.RDS")
knitr::kable(show_table(countries, provide_key=c("country","country_label")))
```
