{
  "hash": "5a8767a09a206821afee88b299f1f232",
  "result": {
    "markdown": "::: {.cell warnings='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nwd_events=readRDS(\"data/wd_events.RDS\")\nwm_full=readRDS(\"data/wm_full.RDS\")\nwp_20_words_per_event=readRDS(\"data/wp_20_words_per_event.RDS\")\nwp_words_spec=readRDS(\"data/wp_words_spec.RDS\")\nwp_themes=readRDS(\"data/tib_gamma.RDS\") %>% \n  group_by(flood) %>% \n  slice_max(gamma) %>% \n  ungroup()\nwm_full=wm_full %>% \n  left_join(wp_20_words_per_event, by=c(\"flood\",\"flood_label\")) %>% \n  left_join(wp_themes,\n            by=\"flood\") %>% \n  left_join(wp_words_spec,by=\"flood\")\n```\n:::\n\n\n# Wikidata Map\n\nwm_map corresponds to a dataset with one row=one event (we summarise coordinates into a single centroid) and a popup variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet) \n wm_map=wm_full %>%\n  filter(!is.na(coords)) %>%\n  sf::st_as_sf(wkt=\"coords\") %>% \n  group_by(flood,flood_label) %>%\n  mutate(noarticle=all(is.na(article)),\n         noimage=all(is.na(image))) %>% \n  mutate(article=case_when(noarticle~\"\",\n                           !noarticle~glue::glue(\"<a href='{article}',target='_blank'>{lang} ðŸ”— </a>\")),\n         image=case_when(noimage~\"\",\n                         !noimage~glue::glue(\"<img src='{image}'  width='200'>\"))) %>% \n  summarise(coords_from=first(coords_from),\n            year=first(year),\n            country_label=first(country_label),\n            deathtoll=mean(deathtoll,na.rm=TRUE),\n            date=first(date),\n            start=first(start),\n            end=first(end),\n            date_precision=first(date_precision),\n            article=paste0(unique(article), collapse=\" \"),\n            image=paste0(unique(image),collapse=\" \"),\n            words=unique(words),\n            specific_words=unique(specific_words),\n            date_precision=unique(date_precision),\n            coords_from=unique(coords_from),\n            topic=unique(topic),\n            gamma=unique(gamma),\n            nwords=unique(nwords),\n            topic_label=unique(topic_label)) %>% \n  ungroup() %>% \n  mutate(flood=stringr::str_replace(flood,\"wd:\",\"\")) %>% \n  mutate(popup=glue::glue(\"<h3>{flood_label}<a href='http://www.wikidata.org/entity/{flood}'     target='_blank'>ðŸ”—</a></h3>\")) %>%\n  mutate(popup=case_when(!is.na(date)~glue::glue(\"{popup}<p>date: {date}</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=case_when(!is.na(deathtoll)~glue::glue(\"{popup}<p>deathtoll:{deathtoll}</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=case_when(!is.na(article)~glue::glue(\"{popup}<p>Wikipedia: {article}</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=case_when(!is.na(image)~glue::glue(\"{popup}<p>{image}</p>\"),\n                                 TRUE~popup)) %>%   \n  mutate(popup=case_when(!is.na(words)~glue::glue(\"{popup}<p><b>coords precision</b> from {coords_from}; <b>date precision</b>: {date_precision}</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=case_when(!is.na(words)~glue::glue(\"{popup}<p><b>frequent words:</b> {words}</p>\"),\n                                 TRUE~popup)) %>%   mutate(popup=case_when(!is.na(words)~glue::glue(\"{popup}<p><b>specific words:</b> {specific_words}</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=case_when(!is.na(topic_label)~glue::glue(\"{popup}<p><b>Topic:</b>{topic_label}({round(gamma*100)}%)</p>\"),\n                                 TRUE~popup)) %>% \n  mutate(popup=paste0(\"<style> div.leaflet-popup-content {width:1200}</style>\",popup)) %>% \n  sf::st_centroid()\n```\n:::\n\n\nWe will jitter the coordinates in order to not have exactly overlapping coordinates on the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords=wm_map %>%\n  sf::st_coordinates() %>% \n  as_tibble() %>% \n  select(long=X,lat=Y)\nwm_map=wm_map %>% \n  bind_cols(coords) %>% \n  mutate(coords_txt=as.character(coords))\n\njitter_coord=function(datlonlat,n){\n  long=datlonlat$long+runif(n,-0.2,0.2)\n  lat=datlonlat$lat+runif(n,-0.2,0.2)\n  result=tibble::tibble(flood=datlonlat$flood,\n                           long=long,\n                           lat=lat)\n  return(result)\n}\n\njittered_coords=wm_map  %>% \n  sf::st_drop_geometry() %>% \n  select(flood,coords_txt,long,lat) %>% \n  unique() %>% \n  group_by(coords_txt) %>%\n  mutate(n=n()) %>%\n  tidyr::nest(data=c(flood,long,lat)) %>%\n  mutate(data=purrr::map2(data,n,jitter_coord)) %>%\n  tidyr::unnest(data) %>%\n  ungroup()\n```\n:::\n\n\nRe-generate data geometry from jittered coords\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_map=wm_map %>%\n  sf::st_drop_geometry() %>% \n  select(-long,-lat,-coords_txt) %>% \n  left_join(jittered_coords %>%\n              select(flood,long,lat),\n            by=\"flood\") %>% \n  sf::st_as_sf(coords = c(\"long\", \"lat\"), \n               crs = 4326, agr = \"constant\")\nsaveRDS(wm_map,\"data/wm_map.RDS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DÃ©finition d'une Ã©chelle colorÃ©e \n# (en fonction de date de sortie) \npal <- colorNumeric(c(\"red\", \"green\", \"blue\"),\n                    c(1648,1900,1950,1980,2000,2010,2023)) \n# CrÃ©ation de la carte \nleaf_wm_map=leaflet(wm_map) %>% # dÃ©f carte \n  addProviderTiles(providers$Esri.WorldTopoMap) %>% # ajout fond de carte\n  addCircleMarkers(col=~pal(year),\n                   popup = ~popup,\n                   radius =~log(deathtoll+2)\n                   ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in pal(year): Some values were outside the color scale and will be\ntreated as NA\n\nWarning in pal(year): Some values were outside the color scale and will be\ntreated as NA\n```\n:::\n:::\n\n\n# Data from institutionnally curated databases\n\n## Data from the Dartmouth Flood Observatory\n\n\n::: {.cell}\n\n```{.r .cell-code}\navdate=function(date1,date2){\n  date1=as.numeric(date1)\n  date2=as.numeric(date2)\n  result=as.Date(mean(c(date1,date2)))\n  return(result)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfo_raw=readr::read_csv(\"data/FloodArchive.csv\", \n    locale = locale(decimal_mark = \",\"))\ncolnames(dfo_raw)=c(\"index\",\"GlideNumber\",\"dfo_country\",\"dfo_other_country\",\n           \"dfo_centroid_x\",\"dfo_centroid_y\",\"area\",\"dfo_began\",\"dfo_ended\",\n           \"validation\",\"dfo_dead\",\"displaced\",\"maincause\",\"severity\")\ndfo_raw=dfo_raw %>% \n  mutate(start=lubridate::dmy(dfo_began),\n         end=lubridate::dmy(dfo_ended)) %>% \n  mutate(flood=as.character(index),\n         flood_label=as.character(index),\n         country_label=dfo_country,\n         deathtoll=dfo_dead,\n         coords=paste0(\"Point(\",dfo_centroid_x,\" \",dfo_centroid_y,\")\"))\n\ndfo_comp=dfo_raw %>% \n  select(flood,flood_label,country_label,deathtoll, start, end,coords) %>% \n  mutate(date=purrr::map2(start,end,avdate)) %>% \n  tidyr::unnest(date)%>% \n  sf::st_as_sf(wkt=\"coords\") %>% \n  sf::st_set_crs(4326) \nsaveRDS(dfo_comp,\"data/dfo_comp_befcorrection.RDS\")\nsource(\"scripts/correct_dfo_countries.R\")\ndfo_comp=readRDS(\"data/dfo_comp.RDS\")\n```\n:::\n\n\nThis dataset documents 5129 flood events that occurred between 1985-01-01 and 2021-10-09.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_comp=wm_map %>%\n  select(flood,flood_label,country_label,deathtoll, date ,start, end,popup) %>% \n  mutate(flood=stringr::str_replace(flood,\"wd:\",\"\")) %>% \n  filter(date>lubridate::ymd(\"1985-01-01\") & \n         date<lubridate::ymd(\"2021-12-31\")) %>% \n  mutate(source=\"wd\") %>% \n  mutate(flood=paste0(\"wd:\",flood)) \nsaveRDS(wm_comp,\"data/wm_comp.RDS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndfo_comp=dfo_comp %>%\n   mutate(source=\"dfo\",\n          geometry=coords) %>%\n   select(-coords) %>% \n   mutate(popup=glue::glue(\"<h1>{flood_label}</h1>\n                            <p>date: {date}</p>\n                            <p>deathtoll:{deathtoll}</p>\"))  \nwm_dfo=bind_rows(wm_comp,dfo_comp)\nsaveRDS(wm_dfo,\"data/wm_dfo.RDS\")\n```\n:::\n\n\n## Basic stats\n\nBased on the spatial and temporal data in both datasets, we try to find correspondences between the events described in Wikidata and those described in the Dartmouth Flood Observatory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_corresponding_flood=function(flood_id,tib=wm_dfo){\n  tib_sub=tib %>% filter(flood==flood_id)\n  tib_dist=tib %>% \n    mutate(disttime=abs(tib$date-tib_sub$date),\n           distspace=sf::st_distance(tib,tib_sub)[,1]) %>% \n    mutate(disttime=as.numeric(disttime),\n           distspace=as.numeric(distspace)) %>% \n    filter(flood!=flood_id) %>%  \n    mutate(cond1=disttime<395 & distspace<400000,\n           cond2=disttime<395 & str_detect(country_label,tib_sub$country_label)) %>%\n    filter(cond1|cond2) %>% \n    select(floodcorr=flood,\n           disttime,\n           distspace,\n           sourcecorr=source,\n           country_corr=country_label,\n           deathtoll_corr=deathtoll) %>% \n    sf::st_drop_geometry()\n  if(nrow(tib_dist)==0){\n    tib_dist=tibble::tibble(floodcorr=NA,\n                            disttime=NA,\n                            distspace=NA,\n                            sourcecorr=NA,\n                            countrycorr=NA,\n                            deathtollcorr=NA)\n  }else{\n    tib_dist=tib_dist %>%\n    filter(disttime==min(disttime,na.rm=TRUE)) \n  }\n  \n  return(tib_dist)\n}\n```\n:::\n\n\nFor each flood event defined in the WD dataset, we filter the DFO dataset to only keep the event corresponding to the minimum distance in space and time, then we consider the events concur if they occurred less than 400 days apart and 400 kms away. This is a rather loose correspondence which is explained by the sometimes low precision in the WD information corresponding to time or coordinates of occurrence (not to mention the inherent difficulty, for contributors of both datasets, of associating a flood event to a precise time and place).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!file.exists(\"data/wm_dfo_corr.RDS\")){\n  wm_dfo_proj= wm_dfo %>%\n    sf::st_set_crs(4326) %>% \n    sf::st_transform(3857)\n  wm_dfo_corr= wm_dfo_proj%>% \n    mutate(data=purrr::map(flood,\n                           find_corresponding_flood,\n                           tib=wm_dfo_proj)) %>% \n    tidyr::unnest(data) %>% \n    filter(source==\"wd\" & sourcecorr==\"dfo\") %>% \n    sf::st_transform(4326)\n  saveRDS(wm_dfo_corr,\n        \"data/wm_dfo_corr.RDS\")\n}\nwm_dfo_corr=readRDS(\"data/wm_dfo_corr.RDS\")\n```\n:::\n\n\nWe create lines to join events from one dataset to the other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_dfo_corr=readRDS(\"data/wm_dfo_corr.RDS\") %>% \n  sf::st_drop_geometry()\njoined_events=bind_rows(\n  tibble::tibble(id=1:nrow(wm_dfo_corr),flood=wm_dfo_corr$flood),\n  tibble::tibble(id=1:nrow(wm_dfo_corr),flood=wm_dfo_corr$floodcorr)) %>% \n  arrange(id)\njoined_events=wm_dfo %>% \n  left_join(joined_events, by=\"flood\") %>%  \n  select(id)%>%\n  filter(!is.na(id)) %>% \n  arrange(id)%>% \n  group_by(id) %>% \n  summarise(m =mean(id),do_union=FALSE) %>% \n  sf::st_cast(\"LINESTRING\")\njoined_events=joined_events[1:(nrow(joined_events)-1),]\nsaveRDS(joined_events,\"data/joined_events.RDS\")\n```\n:::\n\n\n## Number of correspondences\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNwd_in_range=wd_events %>% \n  filter(year>=1985 & year<=2021) %>% \n  sf::st_drop_geometry() %>%\n  summarise(n=length(unique(flood))) %>% \n  pull(n)\n```\n:::\n\n\nBased on the dates of observations for the DFO data base, 414 out of the 802 flood events in our Wikidata base might fall into it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_wm=wm_comp %>% group_by(flood) %>% tally() %>% nrow()\nnb_wm_in_dfo=wm_dfo_corr %>% group_by(flood) %>% tally() %>% nrow()\nnb_dfo=dfo_comp %>% group_by(flood) %>% tally() %>% nrow()\nnb_dfo_in_wd=wm_dfo_corr %>% group_by(floodcorr) %>% tally() %>% nrow()\n```\n:::\n\n\nOut of 388 flood events documented in the WD comparison data subset, 296 have at least one correspondence in the DFO comparison data subset (76.29%).\n\nOut of 5129 flood events documented in the DFO comparison data subset, 281 have at least one correspondence in the WD comparison data subset (5.48%).\n\n## Why are flood events documented in Wikidata\n\n1st hypothesis: number of dead explains the occurrence of the event in WD. =\\> nope, actually it's the opposite because events are documented in rich countries in which the number of dead is lower. How to account for this effect?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#severity\ndfo_raw %>%  pull(severity) %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.242495\n```\n:::\n\n```{.r .cell-code}\ndfo_raw %>% filter(flood %in% wm_dfo_corr$floodcorr) %>% pull(severity) %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.492883\n```\n:::\n\n```{.r .cell-code}\n#deathtoll\ndfo_raw %>%  pull(deathtoll) %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 134.199\n```\n:::\n\n```{.r .cell-code}\ndfo_raw %>% filter(flood %in% wm_dfo_corr$floodcorr) %>% pull(deathtoll) %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 102.089\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dfo_comp$deathtoll)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 134.2184\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntib_wd_in_dfo=wm_dfo_corr %>% \n  select(country_label,flood) %>% \n  unique() %>% \n  group_by(country_label) %>% \n  summarise(n_wd_in_dfo=n()) \n\ntib_dfo=dfo_comp %>% \n  mutate(country_label=stringr::str_trim(country_label)) %>% \n  tidyr::separate_longer_delim(country_label, delim=\"   \") %>% \n  select(country_label,flood) %>% \n  unique() %>% \n  group_by(country_label) %>% \n  summarise(n_dfo=n())\n\ntruc=left_join(tib_dfo,tib_wd_in_dfo,by=\"country_label\") %>% \n  mutate(prop=n_wd_in_dfo/n_dfo)\n```\n:::\n",
    "supporting": [
      "5_join_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}