```{r setup, warnings=FALSE, message=FALSE}
library(tidyverse)
wd_events=readRDS("data/wd_events.RDS")
wd_full=readRDS("data/wd_full.RDS")
wd_words=readRDS("data/words.RDS")
wd_full=wd_full %>% left_join(wd_words, by=c("flood","flood_label"))
```

# Wikidata Map

```{r wd_map, warning=FALSE, message=FALSE}
library(leaflet) 
 wd_map=wd_full %>%
  # filter NA coords before transforming in sf multipoint
  filter(!is.na(coords)) %>%
  sf::st_as_sf(wkt="coords") %>% 
  # group by flood event
  group_by(flood,flood_label) %>%
  # in case there is no Wikipedia article 
  mutate(noarticle=all(is.na(article)),
         noimage=all(is.na(image)),
         lang=stringr::str_extract(article,"..(?=\\.wikipedia)"),
         flood=stringr::str_replace(flood,"wd:","")) %>% 
  mutate(article=case_when(noarticle~"",
                           !noarticle~glue::glue("<a href='{article}',target='_blank'>{lang} ðŸ”— </a>")),
         image=case_when(noimage~"",
                         !noimage~glue::glue("<img src='{image}'  width='200'>"))) %>% 
  summarise(coords_from=first(coords_from),
            year=first(year),
            country_label=first(country_label),
            deathtoll=mean(deathtoll,na.rm=TRUE),
            date=first(date),
            start=first(start),
            end=first(end),
            date_precision=first(date_precision),
            article=paste0(unique(article), collapse=" "),
            image=paste0(unique(image),collapse=" "),
            words=unique(words),
            date_precision=unique(date_precision),
            coords_from=unique(coords_from)) %>% 
  ungroup() %>% 
  mutate(popup=glue::glue("<h1>{flood_label}<a href='http://www.wikidata.org/entity/{flood}'
                             target='_blank'>ðŸ”—</a></h1>")) %>%
  mutate(popup=case_when(!is.na(date)~glue::glue("{popup}<p>date: {date}</p>"),
                                 TRUE~popup)) %>% 
  mutate(popup=case_when(!is.na(deathtoll)~glue::glue("{popup}<p>deathtoll:{deathtoll}</p>"),
                                 TRUE~popup)) %>% 
  mutate(popup=case_when(!is.na(article)~glue::glue("{popup}<p>{article}</p>"),
                                 TRUE~popup)) %>% 
  mutate(popup=case_when(!is.na(image)~glue::glue("{popup}<p>{image}</p>"),
                                 TRUE~popup)) %>%   
  mutate(popup=case_when(!is.na(words)~glue::glue("{popup}<p>Coords from {coords_from}; date precision: {date_precision}</p>"),
                                 TRUE~popup)) %>% 
  mutate(popup=case_when(!is.na(words)~glue::glue("{popup}<p>{words}</p>"),
                                 TRUE~popup)) %>% 
  sf::st_centroid()
coords=wd_map %>%
  sf::st_coordinates() %>% 
  as_tibble() %>% 
  select(long=X,lat=Y)
wd_map=wd_map %>% 
  bind_cols(coords) %>% 
  mutate(coords_txt=as.character(coords))
```

```{r def_jitter_coords}
jitter_coord=function(datlonlat,n){
  long=datlonlat$long+runif(n,-1,1)
  lat=datlonlat$lat+runif(n,-1,1)
  result=tibble::tibble(flood=datlonlat$flood,
                           long=long,
                           lat=lat)
  return(result)
}
```

```{r jittered_coords}
jittered_coords=wd_map  %>% 
  sf::st_drop_geometry() %>% 
  select(flood,coords_txt,long,lat) %>% 
  unique() %>% 
  group_by(coords_txt) %>%
  mutate(n=n()) %>%
  tidyr::nest(data=c(flood,long,lat)) %>%
  mutate(data=purrr::map2(data,n,jitter_coord)) %>%
  tidyr::unnest(data) %>%
  ungroup()

```

```{r}
wd_map=wd_map %>%
  sf::st_drop_geometry() %>% 
  select(-long,-lat,-coords_txt) %>% 
  left_join(jittered_coords %>%
              select(flood,long,lat),
            by="flood") %>% 
  sf::st_as_sf(coords = c("long", "lat"), 
               crs = 4326, agr = "constant")
```

```{r}
# DÃ©finition d'une Ã©chelle colorÃ©e 
# (en fonction de date de sortie) 
pal <- colorNumeric(c("red", "green", "blue"),
                    c(1648,1900,1950,1980,2000,2010,2023)) 
# CrÃ©ation de la carte 
leaf_wd_map=leaflet(wd_map) %>% # dÃ©f carte 
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>% # ajout fond de carte
  addCircleMarkers(col=~pal(year),
                   popup = ~popup,
                   radius =~log(deathtoll+2)
                   ) 

```

```{r leaf_wd_map, fig.width=10,fig.height=8}
leaf_wd_map 
```

# Data from institutionnally curated databases

## Data from the Dartmouth Flood Observatory

```{r def_avdate}
avdate=function(date1,date2){
  date1=as.numeric(date1)
  date2=as.numeric(date2)
  result=as.Date(mean(c(date1,date2)))
  return(result)
}
```

```{r read_tib_dfo, warning=FALSE, message=FALSE}
dfo_raw=readr::read_csv("data/FloodArchive.csv", 
    locale = locale(decimal_mark = ","))
colnames(dfo_raw)=c("index","GlideNumber","dfo_country","dfo_other_country",
           "dfo_centroid_x","dfo_centroid_y","area","dfo_began","dfo_ended",
           "validation","dfo_dead","displaced","maincause","severity")
dfo_raw=dfo_raw %>% 
  mutate(start=lubridate::dmy(dfo_began),
         end=lubridate::dmy(dfo_ended)) %>% 
  # mutate(dfo_other_country=case_when(is.na(dfo_other_country)~"",
  #                                    dfo_other_country==0~"",
  #                                    TRUE~dfo_other_country)) %>% 
  mutate(flood=as.character(index),
         flood_label=as.character(index),
         country_label=dfo_country,
         #country_label=paste(dfo_country," ",dfo_other_country),
         deathtoll=dfo_dead,
         coords=paste0("Point(",dfo_centroid_x," ",dfo_centroid_y,")"))

dfo_comp=dfo_raw %>% 
  select(flood,flood_label,country_label,deathtoll, start, end,coords) %>% 
  mutate(date=purrr::map2(start,end,avdate)) %>% 
  tidyr::unnest(date)
saveRDS(dfo_comp,"data/dfo_comp.RDS")
source("correct_dfo_countries.R")
dfo_comp=readRDS("data/dfo_compc.RDS")
```

```{r}
wd_comp=wd_map %>%
  select(flood,flood_label,country_label,deathtoll, date ,start, end,popup) %>% 
  mutate(flood=stringr::str_replace(flood,"wd:",""))
```

This dataset documents `r nrow(dfo_comp)` flood events that occurred between `r min(dfo_comp$start)` and `r max(dfo_comp$end)`.

```{r}
Nwd_in_range=wd_events %>% 
  filter(year>=1985 & year<=2021) %>% 
  sf::st_drop_geometry() %>%
  summarise(n=length(unique(flood))) %>% 
  pull(n)
```

Based on the dates of observations for the DFO data base, `r Nwd_in_range` out of the `r nrow(wd_events)` flood events in our Wikidata base might fall into it.

## Basic stats

```{r}
wd_comp=wd_comp  %>% 
   mutate(source="wd") %>% 
   mutate(flood=paste0("wd:",flood)) %>% 
   filter(date>lubridate::ymd("1985-01-01") & 
          date<lubridate::ymd("2021-12-31")) %>% 
  sf::st_set_crs(4326) %>% 
  sf::st_transform(3857)
dfo_comp=dfo_comp %>%
  sf::st_set_crs(4326) %>% 
  sf::st_transform(3857) %>% 
   mutate(source="dfo",
          geometry=coords) %>%
   select(-coords) %>% 
   mutate(popup=glue::glue("<h1>{flood_label}</h1>
                            <p>date: {date}</p>
                            <p>deathtoll:{deathtoll}</p>"))  
tib=bind_rows(wd_comp,dfo_comp) %>% 
  mutate(date=lubridate::round_date(date,"month")) %>% 
  sf::st_as_sf(wkt="geometry")
```

Based on the spatial and temporal data in both datasets, we try to find correspondences between the events described in Wikidata and those described in the Dartmouth Flood Observatory.

```{r def_find_corresponding_flood}
find_corresponding_flood=function(flood_id,tib=tib){
  tib_sub=tib %>% filter(flood==flood_id)
  tib_dist=tib %>% 
    mutate(disttime=abs(tib$date-tib_sub$date),
           distspace=sf::st_distance(tib,tib_sub)[,1]) %>% 
    mutate(disttime=as.numeric(disttime),
           distspace=as.numeric(distspace)) %>% 
    filter(flood!=flood_id) %>%  
    mutate(cond1=disttime<395 & distspace<400000,
           cond2=disttime<395 & str_detect(country_label,tib_sub$country_label)) %>%
    filter(cond1|cond2) %>% 
    select(floodcorr=flood,
           disttime,
           distspace,
           sourcecorr=source,
           country_corr=country_label,
           deathtoll_corr=deathtoll) %>% 
    sf::st_drop_geometry()
  if(nrow(tib_dist)==0){
    tib_dist=tibble::tibble(floodcorr=NA,
                            disttime=NA,
                            distspace=NA,
                            sourcecorr=NA,
                            countrycorr=NA,
                            deathtollcorr=NA)
  }else{
    tib_dist=tib_dist %>%
    filter(disttime==min(disttime,na.rm=TRUE)) 
  }
  
  return(tib_dist)
}
```

For each flood event defined in the WD dataset, we filter the DFO dataset to only keep the event corresponding to the minimum distance in space and time, then we consider the events concur if they occurred less than 400 days apart and 400 kms away. This is a rather loose correspondence which is explained by the sometimes low precision in the WD information corresponding to time or coordinates of occurrence (not to mention the inherent difficulty, for contributors of both datasets, of associating a flood event to a precise time and place).

```{r}
if(!file.exists("data/tibcorr.RDS")){
tibcorr= tib %>%
  mutate(data=purrr::map(flood,find_corresponding_flood,tib=tib)) %>% 
  tidyr::unnest(data) %>% 
  filter(source=="wd" & sourcecorr=="dfo")
saveRDS(tibcorr,
        "data/tibcorr.RDS")
}
tibcorr=readRDS("data/tibcorr.RDS")
tib=tib %>%
  sf::st_transform(4326) %>% 
  select(-coords)
```


We create lines to join events from one dataset to the other.

```{r}
tibcorr=readRDS("data/tibcorr.RDS") %>% 
  sf::st_drop_geometry()
joined_events=bind_rows(
  tibble::tibble(id=1:nrow(tibcorr),flood=tibcorr$flood),
  tibble::tibble(id=1:nrow(tibcorr),flood=tibcorr$floodcorr)) %>% 
  arrange(id)
joined_events=tib %>% 
  left_join(joined_events, by="flood") %>%  
  select(id)%>%
  filter(!is.na(id)) %>% 
  arrange(id)%>% 
  group_by(id) %>% 
  summarise(m =mean(id),do_union=FALSE) %>% 
  sf::st_cast("LINESTRING")
joined_events=joined_events[1:(nrow(joined_events)-1),]
```

## Number of correspondences

```{r nb_corr}
nb_wd=wd_comp %>% group_by(flood) %>% tally() %>% nrow()
nb_wd_in_dfo=tibcorr %>% group_by(flood) %>% tally() %>% nrow()
nb_dfo=dfo_comp %>% group_by(flood) %>% tally() %>% nrow()
nb_dfo_in_wd=tibcorr %>% group_by(floodcorr) %>% tally() %>% nrow()
```

Out of `r nb_wd` flood events documented in the WD comparison data subset, `r nb_wd_in_dfo` have at least one correspondence in the DFO comparison data subset (`r round(nb_wd_in_dfo/nb_wd *100,2)`%).

Out of `r nb_dfo` flood events documented in the DFO comparison data subset, `r nb_dfo_in_wd` have at least one correspondence in the WD comparison data subset (`r round(nb_dfo_in_wd/nb_dfo *100,2)`%).

## Why are flood events documented in Wikidata

1st hypothesis: number of dead explains the occurrence of the event in WD. =\> nope, actually it's the opposite because events are documented in rich countries in which the number of dead is lower. How to account for this effect?

```{r}
#severity
dfo_raw %>%  pull(severity) %>% mean()
dfo_raw %>% filter(flood %in% tibcorr$floodcorr) %>% pull(severity) %>% mean()

#deathtoll
dfo_raw %>%  pull(deathtoll) %>% mean()
dfo_raw %>% filter(flood %in% tibcorr$floodcorr) %>% pull(deathtoll) %>% mean()

```

```{r}
mean(dfo_comp$deathtoll)
```

```{r}
tib_wd_in_dfo=tibcorr %>% 
  select(country_label,flood) %>% 
  unique() %>% 
  group_by(country_label) %>% 
  summarise(n_wd_in_dfo=n()) 

tib_dfo=dfo_comp %>% 
  mutate(country_label=stringr::str_trim(country_label)) %>% 
  tidyr::separate_longer_delim(country_label, delim="   ") %>% 
  select(country_label,flood) %>% 
  unique() %>% 
  group_by(country_label) %>% 
  summarise(n_dfo=n())

truc=left_join(tib_dfo,tib_wd_in_dfo,by="country_label") %>% 
  mutate(prop=n_wd_in_dfo/n_dfo)

```

## Map comparison

```{r}
library(leaflet) 
# DÃ©finition d'une Ã©chelle colorÃ©e 
# (en fonction de date de sortie) 
# CrÃ©ation de la carte 
pal=colorFactor(c("red","blue"), domain=c("wd","dfo"))
comp_map=leaflet(tib)  %>%
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>% # ajout fond de carte
  addCircleMarkers(col=~pal(source),
                   popup =~popup,
                   radius =~log(deathtoll+2)
                   )  %>%
  addPolylines(data=joined_events,color="green")
  

```

```{r}
comp_map
```
